{"ast":null,"code":"var _jsxFileName = \"C:\\\\Academics\\\\Programming\\\\Scaler-Assignment\\\\client\\\\src\\\\contexts\\\\ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nconst initialState = {\n  socket: null,\n  isConnected: false,\n  currentSession: null,\n  messages: [],\n  isTyping: false,\n  leadInfo: null,\n  recommendations: []\n};\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_SOCKET':\n      return {\n        ...state,\n        socket: action.payload\n      };\n    case 'SET_CONNECTION_STATUS':\n      return {\n        ...state,\n        isConnected: action.payload\n      };\n    case 'SET_SESSION':\n      return {\n        ...state,\n        currentSession: action.payload\n      };\n    case 'ADD_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n        isTyping: false\n      };\n    case 'SET_TYPING':\n      return {\n        ...state,\n        isTyping: action.payload\n      };\n    case 'SET_LEAD_INFO':\n      return {\n        ...state,\n        leadInfo: action.payload\n      };\n    case 'SET_RECOMMENDATIONS':\n      return {\n        ...state,\n        recommendations: action.payload\n      };\n    case 'CLEAR_SESSION':\n      return {\n        ...state,\n        currentSession: null,\n        messages: [],\n        leadInfo: null,\n        recommendations: []\n      };\n    default:\n      return state;\n  }\n};\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n  useEffect(() => {\n    // Initialize Socket.IO connection\n    const socket = io('http://localhost:5000');\n    socket.on('connect', () => {\n      dispatch({\n        type: 'SET_CONNECTION_STATUS',\n        payload: true\n      });\n      toast.success('Connected to chatbot server');\n    });\n    socket.on('disconnect', () => {\n      dispatch({\n        type: 'SET_CONNECTION_STATUS',\n        payload: false\n      });\n      toast.error('Disconnected from chatbot server');\n    });\n    socket.on('ai_response', data => {\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: Date.now(),\n          text: data.message,\n          sender: 'ai',\n          timestamp: data.timestamp,\n          sessionId: data.sessionId\n        }\n      });\n    });\n    socket.on('error', error => {\n      toast.error(error.message || 'An error occurred');\n    });\n    dispatch({\n      type: 'SET_SOCKET',\n      payload: socket\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const startChatSession = async () => {\n    try {\n      const response = await fetch('/api/chatbot/start', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: `user_${Date.now()}`\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        dispatch({\n          type: 'SET_SESSION',\n          payload: data\n        });\n\n        // Join the chat room\n        if (state.socket) {\n          state.socket.emit('join_chat', {\n            sessionId: data.sessionId,\n            userId: data.userId\n          });\n        }\n\n        // Add welcome message\n        dispatch({\n          type: 'ADD_MESSAGE',\n          payload: {\n            id: Date.now(),\n            text: \"Hello! I'm Scaler's AI assistant. I'm here to help you learn about our Data Engineering masterclass. What would you like to know?\",\n            sender: 'ai',\n            timestamp: new Date(),\n            sessionId: data.sessionId\n          }\n        });\n        return data;\n      }\n    } catch (error) {\n      toast.error('Failed to start chat session');\n      console.error('Error starting chat session:', error);\n    }\n  };\n  const sendMessage = async message => {\n    if (!state.currentSession || !state.socket) {\n      toast.error('No active chat session');\n      return;\n    }\n\n    // Add user message to chat\n    const userMessage = {\n      id: Date.now(),\n      text: message,\n      sender: 'user',\n      timestamp: new Date(),\n      sessionId: state.currentSession.sessionId\n    };\n    dispatch({\n      type: 'ADD_MESSAGE',\n      payload: userMessage\n    });\n    dispatch({\n      type: 'SET_TYPING',\n      payload: true\n    });\n\n    // Send message to server\n    state.socket.emit('send_message', {\n      message,\n      sessionId: state.currentSession.sessionId,\n      userId: state.currentSession.userId,\n      userContext: state.leadInfo\n    });\n  };\n  const updateLeadInfo = async leadInfo => {\n    if (!state.currentSession) return;\n    try {\n      const response = await fetch('/api/chatbot/update-lead', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          sessionId: state.currentSession.sessionId,\n          leadInfo\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        dispatch({\n          type: 'SET_LEAD_INFO',\n          payload: data.session\n        });\n\n        // Get recommendations\n        const recResponse = await fetch(`/api/chatbot/recommendations/${state.currentSession.sessionId}`);\n        const recData = await recResponse.json();\n        if (recData.success) {\n          dispatch({\n            type: 'SET_RECOMMENDATIONS',\n            payload: recData.recommendations\n          });\n        }\n      }\n    } catch (error) {\n      toast.error('Failed to update lead information');\n      console.error('Error updating lead info:', error);\n    }\n  };\n  const clearSession = () => {\n    dispatch({\n      type: 'CLEAR_SESSION'\n    });\n  };\n  const value = {\n    ...state,\n    startChatSession,\n    sendMessage,\n    updateLeadInfo,\n    clearSession\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","io","toast","jsxDEV","_jsxDEV","ChatContext","initialState","socket","isConnected","currentSession","messages","isTyping","leadInfo","recommendations","chatReducer","state","action","type","payload","ChatProvider","children","_s","dispatch","on","success","error","data","id","Date","now","text","message","sender","timestamp","sessionId","disconnect","startChatSession","response","fetch","method","headers","body","JSON","stringify","userId","json","emit","console","sendMessage","userMessage","userContext","updateLeadInfo","session","recResponse","recData","clearSession","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","Error","$RefreshReg$"],"sources":["C:/Academics/Programming/Scaler-Assignment/client/src/contexts/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst initialState = {\r\n  socket: null,\r\n  isConnected: false,\r\n  currentSession: null,\r\n  messages: [],\r\n  isTyping: false,\r\n  leadInfo: null,\r\n  recommendations: []\r\n};\r\n\r\nconst chatReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_SOCKET':\r\n      return { ...state, socket: action.payload };\r\n    \r\n    case 'SET_CONNECTION_STATUS':\r\n      return { ...state, isConnected: action.payload };\r\n    \r\n    case 'SET_SESSION':\r\n      return { ...state, currentSession: action.payload };\r\n    \r\n    case 'ADD_MESSAGE':\r\n      return { \r\n        ...state, \r\n        messages: [...state.messages, action.payload],\r\n        isTyping: false\r\n      };\r\n    \r\n    case 'SET_TYPING':\r\n      return { ...state, isTyping: action.payload };\r\n    \r\n    case 'SET_LEAD_INFO':\r\n      return { ...state, leadInfo: action.payload };\r\n    \r\n    case 'SET_RECOMMENDATIONS':\r\n      return { ...state, recommendations: action.payload };\r\n    \r\n    case 'CLEAR_SESSION':\r\n      return { \r\n        ...state, \r\n        currentSession: null, \r\n        messages: [], \r\n        leadInfo: null,\r\n        recommendations: []\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const ChatProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(chatReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    // Initialize Socket.IO connection\r\n    const socket = io('http://localhost:5000');\r\n    \r\n    socket.on('connect', () => {\r\n      dispatch({ type: 'SET_CONNECTION_STATUS', payload: true });\r\n      toast.success('Connected to chatbot server');\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      dispatch({ type: 'SET_CONNECTION_STATUS', payload: false });\r\n      toast.error('Disconnected from chatbot server');\r\n    });\r\n\r\n    socket.on('ai_response', (data) => {\r\n      dispatch({\r\n        type: 'ADD_MESSAGE',\r\n        payload: {\r\n          id: Date.now(),\r\n          text: data.message,\r\n          sender: 'ai',\r\n          timestamp: data.timestamp,\r\n          sessionId: data.sessionId\r\n        }\r\n      });\r\n    });\r\n\r\n    socket.on('error', (error) => {\r\n      toast.error(error.message || 'An error occurred');\r\n    });\r\n\r\n    dispatch({ type: 'SET_SOCKET', payload: socket });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const startChatSession = async () => {\r\n    try {\r\n      const response = await fetch('/api/chatbot/start', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          userId: `user_${Date.now()}`\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        dispatch({ type: 'SET_SESSION', payload: data });\r\n        \r\n        // Join the chat room\r\n        if (state.socket) {\r\n          state.socket.emit('join_chat', {\r\n            sessionId: data.sessionId,\r\n            userId: data.userId\r\n          });\r\n        }\r\n\r\n        // Add welcome message\r\n        dispatch({\r\n          type: 'ADD_MESSAGE',\r\n          payload: {\r\n            id: Date.now(),\r\n            text: \"Hello! I'm Scaler's AI assistant. I'm here to help you learn about our Data Engineering masterclass. What would you like to know?\",\r\n            sender: 'ai',\r\n            timestamp: new Date(),\r\n            sessionId: data.sessionId\r\n          }\r\n        });\r\n\r\n        return data;\r\n      }\r\n    } catch (error) {\r\n      toast.error('Failed to start chat session');\r\n      console.error('Error starting chat session:', error);\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (message) => {\r\n    if (!state.currentSession || !state.socket) {\r\n      toast.error('No active chat session');\r\n      return;\r\n    }\r\n\r\n    // Add user message to chat\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text: message,\r\n      sender: 'user',\r\n      timestamp: new Date(),\r\n      sessionId: state.currentSession.sessionId\r\n    };\r\n\r\n    dispatch({ type: 'ADD_MESSAGE', payload: userMessage });\r\n    dispatch({ type: 'SET_TYPING', payload: true });\r\n\r\n    // Send message to server\r\n    state.socket.emit('send_message', {\r\n      message,\r\n      sessionId: state.currentSession.sessionId,\r\n      userId: state.currentSession.userId,\r\n      userContext: state.leadInfo\r\n    });\r\n  };\r\n\r\n  const updateLeadInfo = async (leadInfo) => {\r\n    if (!state.currentSession) return;\r\n\r\n    try {\r\n      const response = await fetch('/api/chatbot/update-lead', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          sessionId: state.currentSession.sessionId,\r\n          leadInfo\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        dispatch({ type: 'SET_LEAD_INFO', payload: data.session });\r\n        \r\n        // Get recommendations\r\n        const recResponse = await fetch(`/api/chatbot/recommendations/${state.currentSession.sessionId}`);\r\n        const recData = await recResponse.json();\r\n        \r\n        if (recData.success) {\r\n          dispatch({ type: 'SET_RECOMMENDATIONS', payload: recData.recommendations });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      toast.error('Failed to update lead information');\r\n      console.error('Error updating lead info:', error);\r\n    }\r\n  };\r\n\r\n  const clearSession = () => {\r\n    dispatch({ type: 'CLEAR_SESSION' });\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    startChatSession,\r\n    sendMessage,\r\n    updateLeadInfo,\r\n    clearSession\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={value}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useChat = () => {\r\n  const context = useContext(ChatContext);\r\n  if (!context) {\r\n    throw new Error('useChat must be used within a ChatProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}